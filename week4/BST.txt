Binary Search Tree
BST is a binary tree in symetric order
Each node has a key-val and every node is larger than all keys in the left and less than all keys in the right

Implementation for node:

pubic class Node
{
    private Key key;
    private Value val;
    private Node left, right;
    private int count;

    public Node(key, val) {
        this.key = key;
        this.val = val;
    }
}

public class BST<Key extends Comparable<Key>, Value>
{
    private Node root;

    private class Node {}

    public void put(Key key, Value val) {
        root = put(root,key,val);
    }

    private Node put(Node x, Key key, Value val)
    {
        if (x == null) return new Node(key, val);
        int cmp = key.compareTo(x.key);
        if (cmp < 0)
            x.left = put(x.left, key,val);
        else if (cmp >0)
            x.right = put(x.right, key, val);
        else x.val = val;

        // count
        x.count = 1 + size(x.left) + size(x.right);
        return x;
    }
    public Value get(Key key)
    {
        Node x = root;
        while (x!= null)
        {
            int cmp = key.compareTo(x.key);
            if (cmp<0) x = x.left;
            else if (cmp >0)  x=x.right;
            else if (cmp == 0) return x.val;
        }

        return null;
    }

    // rank, how many keys < k?

    public int rank(Key key)
    {
        return rank(key, root);
    }

    private int rank(Key key, Node x) {
        if (x == null) return 0;
        int cmp = key.compareTo(x.key);

        if (cmp < 0) return rank(key, x.left);
        else if (cmp >0) return rank(key, x.right);
        else if (cmp == 0) return size(x.left);
    }
    public void delete(Key key) {

    }

    public Key floor(Key key)
    {
        Node x = floor(root, key);
        if (x==null) return null;
        return x.key;
    }

    private Node floor(Node x, Key key) {
        if (x==null) return null;

        int cmp = key.compareTo(x.key);
        if (cmp == 0) return x;
        if (cmp <0) return floor(x.left, key);

        Node t = floor(x.right, key);
        if (t != null) return t;
        else return x;
    }

    public int size() {
        return size(root);
    }

    private int size(Node x)
    {
        if (x == null) return 0;
        return x.count;
    }
    public Iterable<Key> interator()
    {
        Queue<Key> q = new Queue<Ket>();
        inorder(root, q);
        return q;

        private void inorder(Node x, Queue<Key> q)
        {
            if (x==null) return;
            inorder(x.left, q);
            q.enqueue(x.key);
            inorder(x.right, q);
        }
    }

    public void deleteMin()
    {
        root = deleteMin(root);
    }

    // go left until finding a node with a null left link
    // replace that node by its right link
    // update subtree count
    // Hibbard deleteion -- not ballance, not symmetric because it keep going to the min on the left to search
    // delete become sqrt(N) length

    private Node deleteMin(Node x)
    {
        if (x.left == null) return x.right;
        x.left = deleteMin(x.left);
        x.count = 1 + size(x.left) + size(x.right);
        return x;
    }

    public void delete(Key key)
    {
        root = delete(root, key);
    }

    private Node delete(Node x, Key key)
    {
        if (x == null) return null;
        int cmp key.compareTo(x.key);
        if (cmp <0) x.left = delete(x.left, key);
        else if (cmp>0) x.right = delete(x.right, key);
        else if (cmp ==0){
            // no right child
            if (x.right == null) return x.left;
            // no left child
            if (x.left = null) return x.right;
x
            // replace with successor
            Node t = x;
            x = min(t.right);
            x.right = deleteMin(t.right);
            x.left = t.left;
        }
        x.count  = size(x.left) +size(x.right) +1;
        return x;
    }
}