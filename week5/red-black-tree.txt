Red-black BST

Repeat 2-3 tree as a BST
Height of tree is at most 2lgN

Characteristic:
    1. No node has two red links connected to it
    2. Every path from root to null link has the same number of black links.
    3. Red links lean LEFT.

public Val get(Key key)
{
    Node x = root;
    while (x != null)
    {
        int cmp = key.compareTo(x.key);
        if (cmp<0) x=x.left;
        else if (cmp>0) x = x.right;
        else if (cmp == 0) return x.val;
    }
    return null;
}

Red-black BST implementation:

private static final boolean RED = true;
private static final boolean BLACK = false;

private class Node {
    ...
    boolean color;
}

private boolean isRed(Node x)
{
    if (x==null) return false;
    return x.color == RED;
}

private Node rotateLeft(Node h)
{
    assert isRed(h.right);
    Node x = h.right;
    h.right = x.left;
    x.left = h;
    x.color = h.color;
    h.color = RED;
    return x;
}

private Node rorateRight(Node h)
{
    assert isRed(h.left);
    Node x = x.left;
    h.left = x.right;
    x.right = h;
    x.color = h.color;
    h.color = RED;
    return x;
}

private void flipColors(Node h) {
    h.color = RED:
    h.left.color = BLACK;
    h.right.color = BLACK;
}

private Node put(Node h, Key key, Value val)
{
    if (h == null) return new Node(key,val,RED);
    int cmp = key.compareTo(h.key);
    if (cmp <0) h.left = put(h.left, key, val);
    else if (cmp>0) h.right = put(h.right,key,val);
    else if (cmp == 0) h.val = val;

    if (isRED(h.right) && !isRED(h.left)) h = rotateLeft(h); // lean left
    if (isRED(h.left) && isRED(h.left.left)) h = rotate Right(h); // balance 4-node;
    if (isRED(h.left) && isRED(h.right)) flipColors(h); //split 4 node

    return h;
}